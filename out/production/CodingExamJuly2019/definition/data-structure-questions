Please answer the below Data Structure Questions:

Why do we need data structure?
A. By having data in a structured and organized form, it makes it easier for data manipulation and retrieval.

What are the various operations that can be performed on different Data Structures?
A. Searching, sorting, insertion, deletion, merging, and traversing.

List out the areas in which data structures are applied extensively?
A. Compiler Design, Operating System, Database Management System, Statistical Analysis Package, Numerical Analysis,
Graphics, Artificial Intelligence, and Simulation.

What is an Array?
A. A collection of data/value which has index associated with it.
An array shall contain similar types of data, an array can be sorted or unsorted.

What is the difference between the Array and ArrayList?
A. Array length if fixed while ArrayList is dynamic. Array members are accessed using [],
but ArrayList has a set of methods to access elements and modify them as because ArrayList is collection of framework in java.
Array can store primitive variables and objects but ArrayList can store only objects.

What is LinkedList?
A. A linked list is linear data Structure where each element is a separate object which is called node.
Each node has data and reference to the next node. Last node has reference to null.

How is an Array different from Linked List?
A. An array element has an index number, but a node has a reference to the next node.
In array, each element is independent, and does not have any connection to the other elements.
On the other hand in linked list each node is connected by the previous node.

What is queue?
A. Linear data structure where elements can be accessed on the basis of FIFO.

What is stack?
A. Linear data structure where elements can be accessed on the basis of LIFO.

What is FIFO and LIFO?
A. FIFO stands for First In First Out, while LIFO stands fo Last In First Out.

What is the order of complexity?
A. The smaller the order of complexity of the program's underlying algorithm, the faster it will run and the better it will
scale as the input gets larger. Thus, we should often seek more efficient algorithms in order to reduce the order of complexity.

What is the best case to search an element from an array?
A. Binary Searching ans Sorting Algorithm

What is the worst case to search an element from an array?
A. When the time complexity is O(n).

What is tree in data structure?
A. A nonlinear data structure whereas arrays, linked lists, stacks, and queues are linear data structures.
It can be empty of nodes or a tree can be a structure consisting of one node called the root with zero or more sub-trees.

What is graph in data structure?
A. A non-linear data structure consisting of nodes and edges.

What is the difference between the HashTable and HashMap?
A. HashTable is synchronized, HashMap is not. HashTable do not allow null keys or values,
where as HashMap does allow one null key and unlimited null values.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
A. Array in RDBMS, Graph in Network data model, and Trees in Hierarchical data model.

How HashMap works in java?
A. A HashMap element has key and value in Java, elements are stored against a key. Map Interface implemented on HashMap
in Java Collection Framework. Elements manipulation is easy on the basis of key of the value.

What is ArrayIndexOutOfBoundsException in java? When it occurs?
A. A class in java, IndexOutOfBoundsException occur when an array has been accessed with an illegal index.
The index may be either negative to, or greater than, or equal to the size of the array.

What are the different ways of copying an array into another array?
A. Copying it manually, using Arrays.copyOf(), using System.arraycopy(), or using Object.clone().

What is difference between an array and a linked list?
A. An array element has index number, but a node has reference to the next node.
In array, each element is independent and does not have any connection to the other element.
On the other hand, in linked list each node is connected by the previous node.
In Linked list, location or address of elements is stored in the link part of the previous element/node.
In array, no pointers are used like linked list, so there is no need of extra space in memory for the pointer.

What is DFS and BFS?
A. Depth-first search is an algorithm for traversing or searching tree or graph data structure.
Breadth-first search is an algorithm for traversing or searching tree or graph data structure.

What is Recursion?
A. The process where a method calls itself inside the method.

What are linear and non linear data Structures?
A. The data structure where data items are organized sequentially or linearly where data elements attached
one after another is called linear data structure.
The data structure where data items are not organized sequentially is called non linear data structure.

What is Big-(O)-notation?
A. Big O notation is used to describe the performance or complexity of an algorithm.
Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the
space used by an algorithm.

Outlined different kind of sorting algorithm with time complexity?
A. Bubble sort: It is a comparison algorithm. It works by repeatedly stepping through the list to be sorted,
comparing each pair of adjacent items and swapping them if they are in the wrong order.
The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.
Worst case performance: O(n2)
Best case performance: O(n)
Average case performance: O(n2)
Worst case space complexity: O(n) total, O(1) auxiliary
Bubble sort is not a practical sorting algorithm when n is large.

Selection sort: It is an in-place comparison sort.Selection sort is noted for its simplicity,
and also has performance advantages over more complicated algorithms in certain situations.
Worst case performance: O(n2)
Best case performance: O(n2)
Average case performance: O(n2)
Worst case space complexity: O(n) total, O(1) auxiliary

Insertion sort: It is a comparison sort in which the sorted array (or list) is built one entry at a time.
It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.
Worst case performance: O(n2)
Best case performance: O(n)
Average case performance: O(n2)
Worst case space complexity: O(n) total, O(1) auxiliary

Merge sort: It is an O(n log n) comparison-based sorting algorithm.
Worst case performance: O(n log n)
Best case performance: O(n log n) typical
Average case performance: O(n log n)
Worst case space complexity: O(n) total, O(n) auxiliary

Quick sort: It is similar to merge sort in many ways. It divides the elements to be sorted into two groups,
sorts the two groups by recursive calls, and combines the two sorted groups into a single array of sorted values.
The choice of a good pivot element is critical to the efficiency of the quicksort algorithm.
If we can ensure that the pivot element is near the median of the array values, then quicksort is very efficient.
On average, makes O(n log n) comparisons to sort n items, in the worst case, it makes O(n2) comparisons

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

                                      Common Data Structure Operations

  Data Structure	    Time Complexity
                      Average	                                        Worst
                      Access	    Search	    Insertion	Deletion	Access	    Search	    Insertion	Deletion
  Array	               Θ(1)	       Θ(n)	          Θ(n)	    Θ(n)	    O(1)	    O(n)	    O(n)	    O(n)
  Stack	               Θ(n)	       Θ(n)	          Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
  Queue	               Θ(n)	       Θ(n)	          Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
  Singly-Linked List   Θ(n)	       Θ(n)	          Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
  Doubly-Linked List   Θ(n)	       Θ(n)	          Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    O(1)
  Skip List	          Θ(log(n))	  Θ(log(n))	    Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
  Hash Table	       N/A	       Θ(1)	          Θ(1)	    Θ(1)	    N/A	        O(n)	    O(n)	    O(n)
  Binary Search Tree  Θ(log(n))    Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)
  Cartesian Tree	   N/A	       Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(n)	    O(n)	    O(n)
  B-Tree	          Θ(log(n))   Θ(log(n))	    Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
  Red-Black Tree	  Θ(log(n))   Θ(log(n))	    Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
  Splay Tree	       N/A	       Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(log(n))	O(log(n))	O(log(n))
  AVL Tree	          Θ(log(n))	  Θ(log(n))	    Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))	O(log(n))
  KD Tree 	          Θ(log(n))	  Θ(log(n))	    Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    O(n)


